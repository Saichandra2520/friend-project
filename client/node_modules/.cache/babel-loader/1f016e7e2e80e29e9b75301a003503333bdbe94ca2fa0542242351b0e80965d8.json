{"ast":null,"code":"import _objectSpread from\"C:/Users/SIDDH/Desktop/friend project/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from\"react\";import io from\"socket.io-client\";import{useAuth}from\"./AuthContext\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";const NotificationsContext=/*#__PURE__*/createContext(null);export const NotificationsProvider=_ref=>{let{children}=_ref;const[notifications,setNotifications]=useState([]);const[pendingRequests,setPendingRequests]=useState([]);const[socket,setSocket]=useState(null);const{user}=useAuth();useEffect(()=>{if(user){console.log(\"Setting up socket connection for user:\",user);const newSocket=io(\"http://localhost:7777\");setSocket(newSocket);newSocket.on(\"connect\",()=>{console.log(\"Socket connected, emitting user_connected\");const userId=JSON.parse(atob(user.split(\".\")[1])).userId;newSocket.emit(\"user_connected\",userId);});newSocket.on(\"notifications\",data=>{console.log(\"Received notifications:\",data);setNotifications(data);});newSocket.on(\"pending_requests\",data=>{console.log(\"Received pending requests:\",data);setPendingRequests(data);});newSocket.on(\"new_friend_request\",data=>{console.log(\"Received new friend request:\",data);setNotifications(prev=>[data,...prev]);fetchPendingRequests();});fetchPendingRequests();return()=>{console.log(\"Cleaning up socket connection\");newSocket.close();};}},[user]);const fetchPendingRequests=async()=>{if(!user)return;try{const response=await axios.get(\"/api/friends/requests\",{headers:{\"x-auth-token\":user}});console.log(\"Fetched pending requests:\",response.data);setPendingRequests(response.data);}catch(error){console.error(\"Error fetching pending requests:\",error);}};const markAsRead=async notificationId=>{try{await axios.put(\"/api/notifications/\".concat(notificationId,\"/read\"),{},{headers:{\"x-auth-token\":user}});setNotifications(prev=>prev.map(n=>n._id===notificationId?_objectSpread(_objectSpread({},n),{},{read:true}):n));}catch(error){console.error(\"Error marking notification as read:\",error);}};const clearAllNotifications=async()=>{try{await axios.delete(\"/api/notifications/clear\",{headers:{\"x-auth-token\":user}});setNotifications([]);}catch(error){console.error(\"Error clearing notifications:\",error);}};return/*#__PURE__*/_jsx(NotificationsContext.Provider,{value:{notifications,pendingRequests,markAsRead,clearAllNotifications},children:children});};export const useNotifications=()=>useContext(NotificationsContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","io","useAuth","axios","jsx","_jsx","NotificationsContext","NotificationsProvider","_ref","children","notifications","setNotifications","pendingRequests","setPendingRequests","socket","setSocket","user","console","log","newSocket","on","userId","JSON","parse","atob","split","emit","data","prev","fetchPendingRequests","close","response","get","headers","error","markAsRead","notificationId","put","concat","map","n","_id","_objectSpread","read","clearAllNotifications","delete","Provider","value","useNotifications"],"sources":["C:/Users/SIDDH/Desktop/friend project/client/src/context/NotificationsContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { useAuth } from \"./AuthContext\";\r\nimport axios from \"axios\";\r\n\r\nconst NotificationsContext = createContext(null);\r\n\r\nexport const NotificationsProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [pendingRequests, setPendingRequests] = useState([]);\r\n  const [socket, setSocket] = useState(null);\r\n  const { user } = useAuth();\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      console.log(\"Setting up socket connection for user:\", user);\r\n      const newSocket = io(\"http://localhost:7777\");\r\n      setSocket(newSocket);\r\n\r\n      newSocket.on(\"connect\", () => {\r\n        console.log(\"Socket connected, emitting user_connected\");\r\n        const userId = JSON.parse(atob(user.split(\".\")[1])).userId;\r\n        newSocket.emit(\"user_connected\", userId);\r\n      });\r\n\r\n      newSocket.on(\"notifications\", (data) => {\r\n        console.log(\"Received notifications:\", data);\r\n        setNotifications(data);\r\n      });\r\n\r\n      newSocket.on(\"pending_requests\", (data) => {\r\n        console.log(\"Received pending requests:\", data);\r\n        setPendingRequests(data);\r\n      });\r\n\r\n      newSocket.on(\"new_friend_request\", (data) => {\r\n        console.log(\"Received new friend request:\", data);\r\n        setNotifications((prev) => [data, ...prev]);\r\n        fetchPendingRequests();\r\n      });\r\n\r\n      fetchPendingRequests();\r\n\r\n      return () => {\r\n        console.log(\"Cleaning up socket connection\");\r\n        newSocket.close();\r\n      };\r\n    }\r\n  }, [user]);\r\n\r\n  const fetchPendingRequests = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const response = await axios.get(\"/api/friends/requests\", {\r\n        headers: { \"x-auth-token\": user },\r\n      });\r\n      console.log(\"Fetched pending requests:\", response.data);\r\n      setPendingRequests(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching pending requests:\", error);\r\n    }\r\n  };\r\n\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      await axios.put(\r\n        `/api/notifications/${notificationId}/read`,\r\n        {},\r\n        {\r\n          headers: { \"x-auth-token\": user },\r\n        }\r\n      );\r\n      setNotifications((prev) =>\r\n        prev.map((n) => (n._id === notificationId ? { ...n, read: true } : n))\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error marking notification as read:\", error);\r\n    }\r\n  };\r\n\r\n  const clearAllNotifications = async () => {\r\n    try {\r\n      await axios.delete(\"/api/notifications/clear\", {\r\n        headers: { \"x-auth-token\": user },\r\n      });\r\n      setNotifications([]);\r\n    } catch (error) {\r\n      console.error(\"Error clearing notifications:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NotificationsContext.Provider\r\n      value={{\r\n        notifications,\r\n        pendingRequests,\r\n        markAsRead,\r\n        clearAllNotifications,\r\n      }}\r\n    >\r\n      {children}\r\n    </NotificationsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useNotifications = () => useContext(NotificationsContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}